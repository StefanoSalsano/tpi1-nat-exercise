####################################################
             GUIDA ALL'INSTALLAZIONE DI GIT
####################################################

----------------------------------------------------
UTENTI WINDOWS (testato su XP SP3 e 7 Home Pro)
Luca Marcheggiani
----------------------------------------------------

0) Creare un account su GITHUB https://github.com/signup/free

1) Prevelare il setup di Git (Windows)

http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.9-preview20120201.exe&can=2&q=

2) Installate il programma (per utenti a 64 bit, la cartella di installazione sarà C:\Program Files (x86)\)

3) Avviate Git Bash (se non avete modificato le preferenze, sarà sul Desktop e nell'avvio veloce)

4) Dalla console che appare, eseguire il seguente comando per creare una chiave pubblica bash

ssh-keygen -t rsa -C "indirizzo@email.com"
(virgolette incluse)
ATTENZIONE: L'INDIRIZZO EMAIL DEVE COINCIDERE CON QUELLO SCELTO IN FASE DI REGISTRAZIONE AL SERVIZIO GITHUB

Alcune righe di codice, confermeranno l'esecuzione corretta del comando e chiederanno conferma del path locale dove verrà creato il file id_rsa contenente la chiave RSA pubblica
(in Windows 7 la directory .ssh è presente all'interno della cartella utente, in Windows XP è reperibile in C:\Documents and Settings\"Nome Utente" ----> NON IN DOCUMENTI!)


5) Scegliere una password propria (chiave privata) e inserirla due volte nella console

6) Altre righe confermeranno l'effettiva creazione della chiave pubblica RSA e dei due file id_rsa.pub e id_rsa (quest'ultimo senza estensione)

7) Nel pannello di controllo utente di GitHub (https://github.com/settings/profile), selezionare SSH Keys e poi Add New SSH Key

8) Incollare la chiave aprendo il file id_rsa.pub con un editor di testo (consiglio Word o Wordpad invece del Notepad)
ATTENZIONE! MICROSOFT PUBLISHER (presente nei pacchetti Office) RICONOSCE LE ESTENSIONI .PUB
(IGNORARE L'APERTURA CONSIGLIATA CON PUBLISHER)

9) Testare il funzionamento da console, eseguendo il comando:
ssh -T git@github.com

Confermare la connessione digitando yes (NON FATE I PIGRI CHE LA SOLA "y" NON FUNZIONA!)

Se tutto procede per il meglio (vi sarà chiesta la vostra chiave privata, o password), anche con il Firewall di Windows attivo, vi dovrebbe apparire questo messaggio di conferma con l'user associato all'indirizzo email scelto al momento della registrazione.

Hi username! You've successfully authenticated, but GitHub does not provide shell access.

10) Per aiutare GIT a tenere traccia di tutte le modifiche (commit) dei progetti, bisogna completare la procedura con Nome e Cognome e indirizzo email

git config --global user.name "Nome Cognome"

e poi

git config --global user.email "indirizzo@email.com"
(virgolette incluse)

In entrambi i casi non riceverete alcun messaggio di conferma.

11) Occorre creare un "doppione" dell'esercizio sul proprio profilo online:
da loggati, cliccare su Fork in alto a destra qui

https://github.com/StefanoSalsano/tpi1-nat-exercise

e attendere la creazione di un Fork dell'esercizio (collegamento sul proprio spazio GIT)
ECCO IL MIO COME ESEMPIO
https://github.com/djluca84/tpi1-nat-exercise

12) Per importare materialmente sul proprio PC un progetto eseguire il comando

git clone git@github.com:StefanoSalsano/tpi1-nat-exercise.git

Vi sarà chiesta la vostra password privata e il download sarà completato.
Sarà creata una cartella locale nella directory User (Windows 7) e C:\Documents And Settings\UTENTE (Windows XP)

13) Bisogna configurare remote e upstream all'interno della cartella locale per consentirvi di modificare/pubblicare (push) e scaricare/richiedere (pull) eventuali aggiornamenti

Dalla console
cd tpi1-nat-exercise
git remote add origin git://github.com/UTENTE/tpi1-nat-exercise.git
git fetch origin

14) UNA VOLTA ESEGUITE LE MODIFICHE LOCALI, SEGNALIAMO I FILE MODIFICATI

git add README
git commit -m 'first commit'

POSSIAMO ESEGUIRE UNA PUSH (upload degli aggiornamenti)

git push origin master

15) ULTIMO PASSAGGIO, BISOGNA "PROPORRE" LE MODIFICHE OPPORTUNE AL PROFILO DI STEFANO SALSANO, TRAMITE UN PULL REQUEST (in alto a destra sul proprio profilo GIT)


----------------------------------------------------
UTENTI LINUX (testato su Ubuntu v. 10.10 )
Marco Galvagno & Domenico D'Ambrosio
----------------------------------------------------

Per utilizzare il sistema occorre prima di tutto insallare Git su Ubuntu 10.10 e creare un account sul sito GitHub.com

Per installare Git sul sitema operativo:

	1)Sul terminale digitare: apt-get install git-core
	2)Creare l'account su GitHub.com inserendo UserName, Password e una mail di riferimento.

Per consentire il funzionamento di Git con GitHub bisogna creare una coppia di chiavi privata/pubblica per utilizzare la comunicazione SSH:

	3)Digitare sul terminale: ssh-keygen -t rsa -C "youremail"
	(sostituire youremail con l'email di riferimento utilizzata in fase di registrazione e ricordare la passphrase di cui viene richiesto 		l'inserimento)
	
	4)Effettuare il login su GitHub con il proprio UserName e Password e aggiungere una nuova chiave SSH

			4.1)Click su Account Settings -> SSH Keys ->Add New Public Key sul pannello di GitHub.
			4.2)Aprire con un editor di testo il file id_rsa.pub creato al passo 3.
			4.3)Copiare il contenuto nel campo key della finestra di GitHub.
			4.4)Click su Add Key.

Per testare la configurazione:
	6)Digitare sul terminale: ssh -T git@github.com (quando rischiesto dal sistema operativo digitare la passphrase stabilita precedentemente)

Per configurare le proprie informazioni:
	7)Digitare sul terminale:
		git config --global user.name "Firstname Lastname" 
		git config --global user.email "your_email@youremail.com" (inserire la email con cui si è effettuata la registrazione)

Per permettere a tool esterni di operare con Git/GitHub bisogna configurare l'API token:

	8)Da loggati, click su Account Settings ->  Account Settings sul pannello di GitHub.com
	Sul terminale digitare:
		git config --global github.user username
		git config --global github.token yourToken
		(sostituendo a username quello scelto in fase di registrazione e a yourtoken quello individuato sul pannello Account Settings)

Per poter contribuire al progetto tpi1-nat-exercise bisogna creare su GitHub una propria copia:
	8)Da loggati, alla pagina relativa al progetto del professore effettuare il fork del progetto cliccando sul tasto "Fork"

Una volta effettuato il fork esistera una propria copia remota del progetto (su GitHub.com). Per poter effettuare modifiche bisogna creare una copia locale.
	9)Creare una copia locale del progetto forkato con:
		git clone git@github.com:username/tpi1-nat-exercise.git
		(sostituendo username con il proprio)

A questo punto disponiamo di una copia remota e di una copia locale del progetto. Le modifiche locali verranno successivamente propagate alla copia remota, ma non a quella originale da cui è stato effettuato il fork. In generale per tenere traccia dei cambiamenti della copia originale bisogna creare un collegamento al progetto originale

	10)Bisongna creare un oggetto remoto per tenere traccia dei cambiamenti sul progetto originale.
		cd tpi1-nat-exercise (oppure la cartella dove è stato clonato il progetto)
		git remote add upstream git://github.com/StefanoSalsano/tpi1-nat-exercise.git
		git fetch upstream


11)Procedere alla modifica dei file

Per fare in modo che Git tracci i cambiamenti avvenuti sui file bisogna aggiungerli alla sua lista.

	12)Digitare da terminale:
		git add README (README è solo di esempio)
		(se non si facesse "git add" tutte le modifiche effettuate non verrebbero incluse nel commit finale)

Per confermare le modifiche effettuate:
	13)Digitare da terminale:
		git commit -m Committed


Bisogna ora propagare le modifiche alla copia remota del proprio progetto e inviare una proporre le nuove modifiche al professore.

	14)Digitare da terminale:
		git push origin master
	15)Effettuare una Pull Request sul profilo del professore su GitHub.com


###############################################################
             GUIDA ALL'ESECUZIONE DEGLI ESERCIZI SU NETKIT
###############################################################

----------------------------------------------------
Simone Cellini
----------------------------------------------------

1) Dopo aver effettuato il clone per la copia locale del progetto, spostare il contenuto dello stesso in un supporto rimovibile
	(o comunque in modo da potervi accedere su Netkit)

2) Avviare quindi Netkit nelle modalità esposte a lezione (con macchina virtuale o tramite cd-live)

3) Copiare il progetto clonato sul desktop di Netkit

4) Per ogni esercizio, leggere i relativi README.
